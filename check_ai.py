import os
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º .env –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á
api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    raise ValueError("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI –∫–ª–∏–µ–Ω—Ç–∞
client = OpenAI(api_key=api_key)

# –ü—É—Ç—å –∫ —Ç–≤–æ–µ–º—É –ø—Ä–æ–µ–∫—Ç—É (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
PROJECT_PATH = r"C:\Users\indje\Documents\GitHub\bot"

# –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ .py, .txt, .md —Ñ–∞–π–ª—ã
def list_files(path):
    print("\nüìÅ –§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:")
    for root, _, files in os.walk(path):
        for file in files:
            if file.endswith((".py", ".md", ".txt")):
                print(os.path.join(root, file))

# –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª
def read_file(path):
    try:
        with open(path, "r", encoding="utf-8") as f:
            return f.read()
    except UnicodeDecodeError:
        return "‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –≤ UTF-8"
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}"

# –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å GPT
def ask_gpt(prompt, system_prompt="–¢—ã –æ–ø—ã—Ç–Ω—ã–π Python-—Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –û—Ç–≤–µ—á–∞–π –ø–æ –¥–µ–ª—É."):
    response = client.chat.completions.create(
        model="gpt-4",
        messages=[
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ]
    )
    return response.choices[0].message.content.strip()

# –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–º–æ—â—å
def show_help():
    print("""
üìú –ö–æ–º–∞–Ω–¥—ã:
  list                  ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ñ–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞
  read <—Ñ–∞–π–ª>           ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
  ask <–≤–æ–ø—Ä–æ—Å>          ‚Äî –í–æ–ø—Ä–æ—Å GPT –±–µ–∑ —Ñ–∞–π–ª–∞
  context <—Ñ–∞–π–ª>        ‚Äî –ü—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª –∏ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ –µ–≥–æ –∫–æ–¥—É
  help                  ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  exit / quit           ‚Äî –í—ã–π—Ç–∏
""")

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª
def main():
    print("ü§ñ GPT-–ø–æ–º–æ—â–Ω–∏–∫ –∑–∞–ø—É—â–µ–Ω. –ù–∞–ø–∏—à–∏ `help` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.")
    while True:
        user_input = input("> ").strip()

        if user_input == "help":
            show_help()

        elif user_input == "list":
            list_files(PROJECT_PATH)

        elif user_input.startswith("read "):
            _, filename = user_input.split(" ", 1)
            full_path = os.path.join(PROJECT_PATH, filename)
            content = read_file(full_path)
            print(f"\nüìÑ {filename}:\n{'-'*40}\n{content}\n{'-'*40}")

        elif user_input.startswith("ask "):
            _, question = user_input.split(" ", 1)
            print("üí¨ GPT –¥—É–º–∞–µ—Ç...")
            answer = ask_gpt(question)
            print(f"\nü§ñ –û—Ç–≤–µ—Ç:\n{answer}")

        elif user_input.startswith("context "):
            _, filename = user_input.split(" ", 1)
            full_path = os.path.join(PROJECT_PATH, filename)
            file_content = read_file(full_path)
            print(f"\nüìÑ –ü—Ä–æ—á–∏—Ç–∞–ª —Ñ–∞–π–ª {filename}. –¢–µ–ø–µ—Ä—å –∑–∞–¥–∞–π –≤–æ–ø—Ä–æ—Å:")
            follow_up = input(">> ").strip()
            combined_prompt = f"–í–æ—Ç –∫–æ–¥:\n\n{file_content}\n\n–í–æ–ø—Ä–æ—Å: {follow_up}"
            print("üí¨ GPT –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç...")
            answer = ask_gpt(combined_prompt)
            print(f"\nü§ñ –û—Ç–≤–µ—Ç:\n{answer}")

        elif user_input in ["exit", "quit"]:
            print("üëã –ü–æ–∫–∞, –±–æ—Å—Å.")
            break

        else:
            print("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ù–∞–ø–∏—à–∏ `help`, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫.")

if __name__ == "__main__":
    main()
