from aiogram import Router, types
from aiogram.filters import Command
from access import is_admin, add_user, remove_user, add_channel, remove_channel, get_user_channels

router = Router()
pending_actions = {}

@router.message(Command("–¥–æ—Å—Ç—É–ø"))
async def access_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("‚õîÔ∏è –¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤.")
        return

    kb = types.InlineKeyboardMarkup(inline_keyboard=[
        [
            types.InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="add_user"),
            types.InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="remove_user")
        ],
        [
            types.InlineKeyboardButton(text="üì° –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="add_channel"),
            types.InlineKeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å –∫–∞–Ω–∞–ª", callback_data="remove_channel")
        ],
        [
            types.InlineKeyboardButton(text="üìã –ú–æ–∏ –∫–∞–Ω–∞–ª—ã", callback_data="list_channels")
        ]
    ])
    await message.answer("‚öôÔ∏è –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb)

@router.callback_query()
async def handle_access_buttons(callback: types.CallbackQuery):
    uid = callback.from_user.id
    action = callback.data

    if not is_admin(uid):
        await callback.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.", show_alert=True)
        return

    if action == "list_channels":
        channels = get_user_channels(uid)
        text = "üìã –í–∞—à–∏ –∫–∞–Ω–∞–ª—ã:\n" + ("\n".join(channels) if channels else "(–ü—É—Å—Ç–æ)")
        await callback.message.answer(text)
        await callback.answer()
        return

    prompt_map = {
        "add_user": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –î–û–ë–ê–í–õ–ï–ù–ò–Ø:",
        "remove_user": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ user_id –¥–ª—è –£–î–ê–õ–ï–ù–ò–Ø:",
        "add_channel": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ channel_id –¥–ª—è –î–û–ë–ê–í–õ–ï–ù–ò–Ø:",
        "remove_channel": "‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ channel_id –¥–ª—è –£–î–ê–õ–ï–ù–ò–Ø:",
    }
    pending_actions[uid] = action
    await callback.message.answer(prompt_map[action])
    await callback.answer()

@router.message()
async def handle_pending_input(message: types.Message):
    uid = message.from_user.id

    if uid not in pending_actions:
        return

    action = pending_actions.pop(uid)
    target = message.text.strip()

    try:
        if action == "add_user":
            add_user(int(target), role="user")
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω.")
        elif action == "remove_user":
            remove_user(int(target))
            await message.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª—ë–Ω.")
        elif action == "add_channel":
            add_channel(uid, target)
            await message.answer("‚úÖ –ö–∞–Ω–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω.")
        elif action == "remove_channel":
            remove_channel(uid, target)
            await message.answer("‚úÖ –ö–∞–Ω–∞–ª —É–¥–∞–ª—ë–Ω.")
        else:
            await message.answer("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
