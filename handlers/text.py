from aiogram import Router, types
from services.openai_service import ask_gpt
from db import save_message, load_history
from access import get_user_settings, get_user_channels, is_admin

router = Router()

user_contexts = {}  # user_id: {"mode": str, "history": list, "last_post": str}

CONFIRM_PHRASES = {"–¥–∞", "–ø—É–±–ª–∏–∫—É–π", "–æ—Ç–ø—Ä–∞–≤–ª—è–π", "–æ–∫"}
CANCEL_PHRASES = {"–æ—Ç–º–µ–Ω–∞", "–Ω–µ –Ω–∞–¥–æ", "–æ—Ç–º–µ–Ω–∏—Ç—å"}
EDIT_PHRASES = {"–∏–∑–º–µ–Ω–∏", "–ø–µ—Ä–µ–ø–∏—à–∏", "–¥–æ—Ä–∞–±–æ—Ç–∞–π"}



def detect_intent(text: str) -> str:
    lowered = text.lower()
    if any(kw in lowered for kw in ["–ø–æ—Å—Ç", "–Ω–∞–ø–∏—à–∏", "–æ–ø—É–±–ª–∏–∫—É–π", "–≤ –∫–∞–Ω–∞–ª", "–æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å"]):
        return "post"
    return "dialog"

@router.message()
async def handle_ai(message: types.Message):
    uid = message.from_user.id
    text = message.text.strip()

    if not is_admin(uid):
        await message.answer("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ –Ω–µ—Ç
    if uid not in user_contexts:
        user_contexts[uid] = {"mode": None, "history": [], "last_post": None}

    ctx = user_contexts[uid]

    # === –û–ë–†–ê–ë–û–¢–ö–ê –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–Ø ===
    if ctx["mode"] == "confirm_post":
        if text.lower() in CONFIRM_PHRASES:
            channels = get_user_channels(uid)
            if not channels:
                await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –Ω–∏ –æ–¥–∏–Ω –∫–∞–Ω–∞–ª.")
                ctx["mode"] = None
                return

            for ch in channels:
                await message.bot.send_message(
                    chat_id=ch,
                    text=ctx["last_post"],
                    parse_mode="HTML"
                )

            await message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω.")
            ctx["mode"] = None
            return

        elif text.lower() in CANCEL_PHRASES:
            ctx["mode"] = None
            await message.answer("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
            return

        elif text.lower() in EDIT_PHRASES:
            ctx["mode"] = "edit_post"
            await message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ—Å—Ç–∞:")
            return

        else:
            await message.answer("ü§ñ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ: –¥–∞ / –Ω–µ—Ç / –∏–∑–º–µ–Ω–∏—Ç—å")
            return

    # === –û–ë–†–ê–ë–û–¢–ö–ê –†–£–ß–ù–û–ì–û –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø ===
    if ctx["mode"] == "edit_post":
        new_post = text
        ctx["last_post"] = new_post
        ctx["mode"] = "confirm_post"
        await message.answer(f"üìù –ù–æ–≤—ã–π –ø–æ—Å—Ç:\n\n{new_post}\n\n–ü—É–±–ª–∏–∫—É–µ–º?")
        return

    # === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –†–ï–ñ–ò–ú–ê ===
    intent = detect_intent(text)
    ctx["mode"] = intent

    # === –ó–ê–ì–†–£–ó–ö–ê –ù–ê–°–¢–†–û–ï–ö ===
    user_data = get_user_settings(uid)
    remember = user_data["remember"]
    limit = user_data["history_limit"]

    if not ctx["history"]:
        ctx["history"] = load_history(uid, limit)

    ctx["history"].append({"role": "user", "content": text})

    # === PROMPT ===
    system_prompt = (
        "–¢—ã ‚Äî –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≤ Telegram. –û–±—â–∞–π—Å—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, –≤–µ–¥–∏ –¥–∏–∞–ª–æ–≥. "
        "–ï—Å–ª–∏ –æ–Ω –ø—Ä–æ—Å–∏—Ç —Å–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –∫—Ä–∞—Ç–∫–∏–π –∏ —á—ë—Ç–∫–∏–π —Ç–µ–∫—Å—Ç –±–µ–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, —ç–º–æ–¥–∑–∏ –∏ —Ö—ç—à—Ç–µ–≥–æ–≤. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ª–∏—á–Ω—ã–π ‚Äî –æ—Ç–≤–µ—á–∞–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ."
    )

    try:
        reply = ask_gpt(prompt=text, system_prompt=system_prompt, memory=ctx["history"])

        if remember:
            save_message(uid, "user", text)
            save_message(uid, "assistant", reply)

        # === –î–ò–ê–õ–û–ì ===
        if intent == "dialog":
            await message.answer(reply)
            ctx["history"].append({"role": "assistant", "content": reply})
            return

        # === –ü–û–°–¢ ===
        if intent == "post":
            ctx["last_post"] = reply
            ctx["mode"] = "confirm_post"
            await message.answer(f"üìã –í–æ—Ç —á–µ—Ä–Ω–æ–≤–∏–∫ –ø–æ—Å—Ç–∞:\n\n{reply}\n\n–ü—É–±–ª–∏–∫—É–µ–º? (–¥–∞ / –Ω–µ—Ç / –∏–∑–º–µ–Ω–∏—Ç—å)")
            return

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
