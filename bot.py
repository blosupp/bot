import os
import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import CommandStart
from aiogram.client.default import DefaultBotProperties
from openai import OpenAI
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))  # –ü—Ä–∏–º–µ—Ä: -1001234567890

if not BOT_TOKEN or not OPENAI_API_KEY or not CHANNEL_ID:
    raise ValueError("‚ùå –ü—Ä–æ–≤–µ—Ä—å BOT_TOKEN, OPENAI_API_KEY –∏ CHANNEL_ID –≤ .env")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()
client = OpenAI(api_key=OPENAI_API_KEY)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(CommandStart())
async def start(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –ù–∞–ø–∏—à–∏ —Ç–µ–º—É –ø–æ—Å—Ç–∞ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–¥–ø–∏—Å—å—é ‚Äî —è –≤—Å—ë –æ–ø—É–±–ª–∏–∫—É—é –≤ –∫–∞–Ω–∞–ª.")

# –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
@dp.message(F.text)
async def generate_text_post(message: types.Message):
    user_input = message.text.strip()
    if not user_input:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏ —Ç–µ–º—É –¥–ª—è –ø–æ—Å—Ç–∞.")
        return

    await message.answer("‚úçÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç...")

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": f"–°–¥–µ–ª–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π –ø–æ—Å—Ç –≤ Telegram –ø–æ —Ç–µ–º–µ: {user_input}"}
            ]
        )
        post_text = response.choices[0].message.content.strip()

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª
        await bot.send_message(chat_id=CHANNEL_ID, text=post_text)
        await message.answer("‚úÖ –ü–æ—Å—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")

# –§–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é
@dp.message(F.photo)
async def handle_photo_with_caption(message: types.Message):
    if not message.caption:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å –ø–æ–¥–ø–∏—Å—å –∫ —Ñ–æ—Ç–æ ‚Äî —ç—Ç–æ –±—É–¥–µ—Ç —Ç–µ–º–æ–π –ø–æ—Å—Ç–∞.")
        return

    await message.answer("üß† –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ –ø–æ–¥–ø–∏—Å—å...")

    try:
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "user", "content": f"–°–¥–µ–ª–∞–π Telegram-–ø–æ—Å—Ç –ø–æ —Ç–µ–º–µ: {message.caption}"}
            ]
        )
        post_text = response.choices[0].message.content.strip()

        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ñ–æ—Ç–æ —Å —Ç–µ–∫—Å—Ç–æ–º
        await bot.send_photo(
            chat_id=CHANNEL_ID,
            photo=message.photo[-1].file_id,
            caption=post_text,
            parse_mode="HTML"
        )

        await message.answer("‚úÖ –ü–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ –∫–∞–Ω–∞–ª.")
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤.")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())